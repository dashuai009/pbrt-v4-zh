#import "../template.typ": ez_caption, parec

== Sampling Theory
<sampling-theory>


#parec[
  A digital image is represented as a set of pixel values, typically aligned on a rectangular grid. When a digital image is displayed on a physical device, these values are used to determine the spectral power emitted by pixels on the display. When thinking about digital images, it is important to differentiate between image pixels, which represent the value of a function at a particular sample location, and display pixels, which are physical objects that emit light with some spatial and directional distribution. (For example, in an LCD display, the color and brightness may change substantially when the display is viewed at oblique angles.) Displays use the image pixel values to construct a new image function over the display surface. This function is defined at all points on the display, not just the infinitesimal points of the digital image's pixels. This process of taking a collection of sample values and converting them back to a continuous function is called #emph[reconstruction];.
][
  数字图像表示为一组像素值，通常排列在矩形网格上。当数字图像显示在物理设备上时，这些值用于确定显示器上像素发出的光谱功率。 在考虑数字图像时，重要的是要区分图像像素，表示函数在特定采样位置的值；显示像素，是发出光的物理对象。 例如，在液晶显示器中，当从倾斜角度观看显示器时，颜色和亮度可能会显著变化。显示器使用图像像素值在显示表面上构建一个新的图像函数。 该函数在显示器的所有点上定义，而不仅仅是数字图像像素的微小点。这个将一组采样值转换回连续函数的过程称为#emph[重建];。
]

#parec[
  In order to compute the discrete pixel values in the digital image, it is necessary to sample the original continuously defined image function. In `pbrt`, like most other ray-tracing renderers, the only way to get information about the image function is to sample it by tracing rays. For example, there is no general method that can compute bounds on the variation of the image function between two points on the film plane. While an image could be generated by just sampling the function precisely at the pixel positions, a better result can be obtained by taking more samples at different positions and incorporating this additional information about the image function into the final pixel values. Indeed, for the best quality result, the pixel values should be computed such that the reconstructed image on the display device is as close as possible to the original image of the scene on the virtual camera's film plane. Note that this is a subtly different goal from expecting the display's pixels to take on the image function's actual value at their positions. Handling this difference is the main goal of the algorithms implemented in this chapter.
][
  为了计算数字图像中的离散像素值，有必要对原始连续定义的图像函数进行采样。在 `pbrt` 中，像大多数其他光线追踪渲染器一样，获取图像函数信息的唯一方法是通过追踪光线进行采样。 例如，没有通用的方法可以计算胶片平面上两点之间图像函数变化的界限。 虽然可以仅通过在像素位置精确采样函数来生成图像，但通过在不同位置进行更多采样并将这些关于图像函数的附加信息纳入最终像素值，可以获得更好的结果。 实际上，为了获得最佳质量的结果，像素值的计算应使显示设备上的重建图像尽可能接近虚拟相机胶片平面上的场景原始图像。 注意，这与期望显示器的像素在其位置上取图像函数的实际值是一个微妙的不同目标。 处理这种差异是本章实现的算法的主要目标。
]

#parec[
  Because the sampling and reconstruction process involves approximation, it introduces error known as #emph[aliasing,] which can manifest itself in many ways, including jagged edges or flickering in animations. These errors occur because the sampling process is not able to capture all the information from the continuously defined image function.
][
  由于采样和重建过程涉及近似，它引入了称为#emph[混叠];（由于采样过程的近似而引入的误差）的误差，这种误差可能以多种方式表现出来，包括动画中的锯齿边缘或闪烁。 这些误差的发生是因为采样过程无法捕获从连续定义的图像函数中获取的所有信息。
]

#parec[
  As an example of these ideas, consider a 1D function (which we will interchangeably refer to as a signal), given by $f (x)$, where we can evaluate $f (x prime)$ at any desired location $x prime$ in the function's domain. Each such $x prime$ is called a #emph[sample position];, and the value of $f (x prime)$ is the #emph[sample value];. @fig:1d-sample shows a set of samples of a smooth 1D function, along with a reconstructed signal $limits(f)^tilde.basic$ that approximates the original function $f$. In this example, $limits(f)^tilde.basic$ is a piecewise linear function that approximates $f$ by linearly interpolating neighboring sample values (readers already familiar with sampling theory will recognize this as reconstruction with a hat function). Because the only information available about $f$ comes from the sample values at the positions $x prime$, $limits(f)^tilde.basic$ is unlikely to match $f$ perfectly since there is no information about $f$ 's behavior between the samples.
][
  作为这些概念的一个例子，考虑一个一维函数（我们将其互换地称为信号），由 $f (x)$ 给出，我们可以在函数域中的任何期望位置 $x prime$ 处评估 $f (x prime)$。 每个这样的 $x prime$ 称为#emph[采样位置];，而 $f (x prime)$ 的值称为#emph[采样值];。@fig:1d-sample 显示了一组平滑一维函数的采样，以及一个重建信号 $limits(f)^tilde.basic$，它近似于原始函数 $f$。 在这个例子中， $limits(f)^tilde.basic$ 是一个分段线性函数，通过线性插值相邻的采样值来近似 $f$ （已经熟悉采样理论的读者会认识到这是使用帽函数进行重建）。 由于关于 $f$ 的唯一信息来自于位置 $x prime$ 处的采样值， $limits(f)^tilde.basic$ 不太可能完美匹配 $f$，因为没有关于采样之间 $f$ 行为的信息。
]

#figure(
  image("../pbr-book-website/4ed/Sampling_and_Reconstruction/pha08f01.svg"),
  caption: [
    #ez_caption[
      (a) By taking a set of _point samples_ of $f (x)$ (indicated by dots), we determine the value of the function at those
      positions. (b) The sample values can be used to _reconstruct_ a
      function $limits(f)^tilde.basic (x)$ that is an approximation to $f (x)$.
      The sampling theorem, introduced in Section 8.1.3, makes a precise
      statement about the conditions on $f (x)$, the number of samples taken,
      and the reconstruction technique used under which $limits(f)^tilde.basic (x)$ is
      exactly the same as $f (x)$.
      The fact that the original function can sometimes be reconstructed
      exactly from point samples alone is remarkable.
    ][
      (a) 通过对 $f (x)$ 进行一组_点采样_（用点表示），我们确定函数在这些位置的值。(b)采样值可用于_重建_一个函数 $limits(f)^tilde.basic (x)$，它是 $f (x)$ 的近似。 采样定理在第 8.1.3 节中引入，对 $f(x)$ 的条件、采样数量和使用的重建技术做出了精确的陈述，在这些条件下，$limits(f)^tilde.basic (x)$ 与 $f(x)$ 完全相同。值得注意的是， 原始函数有时可以仅从点采样中精确重建。
    ]
  ],
)<1d-sample>



#parec[
  #emph[Fourier analysis] can be used to evaluate the quality of the match between the reconstructed function and the original. This section will introduce the main ideas of Fourier analysis with enough detail to work through some parts of the sampling and reconstruction processes but will omit proofs of many properties and skip details that are not directly relevant to the sampling algorithms used in `pbrt`. The "Further Reading" section of this chapter has pointers to more detailed information about these topics.
][
  #emph[傅里叶分析];（用于评估重建函数与原始函数匹配质量的方法）可用于评估重建函数与原始函数匹配的质量。 本节将介绍傅里叶分析的主要思想，详细到足以处理采样和重建过程的某些部分，但将省略许多性质的证明，并跳过与 `pbrt` 中使用的采样算法不直接相关的细节。 本章的“进一步阅读”部分提供了有关这些主题的更详细信息的指引。
]

=== The Frequency Domain and the Fourier Transform
<the-frequency-domain-and-the-fourier-transform>

#parec[
  One of the foundations of Fourier analysis is the Fourier transform, which represents a function in the #emph[frequency domain];. (We will say that functions are normally expressed in the #emph[spatial domain];.) Consider the two functions graphed in @fig:funcs-low-high-freq. The function in @fig:funcs-low-high-freq(a) varies relatively slowly as a function of $x$, while the function in @fig:funcs-low-high-freq(b) varies much more rapidly. The more slowly varying function is said to have lower-frequency content.
][
  傅里叶分析的基础之一是傅里叶变换（将函数转换为频率空间表示的方法），它在#emph[频域];（函数在频率空间中的表示）中表示一个函数。 （我们将说函数通常在#emph[空间域];（函数通常表达的域）中表达。）考虑@fig:funcs-low-high-freq 中绘制的两个函数。 @fig:funcs-low-high-freq(a) 中的函数作为 $x$ 的函数变化相对缓慢，而@fig:funcs-low-high-freq(b) 中的函数变化得更快。 变化较慢的函数被认为具有较低的频率内容。
]


#figure(
  image("../pbr-book-website/4ed/Sampling_and_Reconstruction/pha08f02.svg"),
  caption: [
    #ez_caption[
      (a) Low-frequency function and (b) high-frequency function. Roughly speaking, the higher frequency a function is, the more quickly it varies over a given region.
    ][
      (a) 低频函数和 (b) 高频函数。粗略地说，函数的频率越高，它在给定区域内的变化越快。
    ]
  ],
)<funcs-low-high-freq>

#parec[
  @fig:low-high-frequency-space shows the frequency space representations of these two functions; the lower-frequency function's representation goes to 0 more quickly than does the higher-frequency function.
][
  @fig:low-high-frequency-space 显示了这两个函数的频率空间表示；低频函数的表示比高频函数更快地趋于 0。
]

#figure(
  image("../pbr-book-website/4ed/Sampling_and_Reconstruction/pha08f03.svg"),
  caption: [
    #ez_caption[
      Frequency Space Representations of the Functions in @fig:funcs-low-high-freq. The graphs show the contribution of each frequency $omega$ to each of the functions in the spatial domain.
    ][
      @fig:funcs-low-high-freq 中函数的频率空间表示。图表显示了每个频率 $omega$ 对空间域中每个函数的贡献。
    ]
  ],
)<low-high-frequency-space>

#parec[
  Most functions can be decomposed into a weighted sum of shifted sinusoids. This remarkable fact was first described by Joseph Fourier, and the Fourier transform converts a function into this representation. This frequency space representation of a function gives insight into some of its characteristics—the distribution of frequencies in the sine functions corresponds to the distribution of frequencies in the original function. Using this form, it is possible to use Fourier analysis to gain insight into the error that is introduced by the sampling and reconstruction process and how to reduce the perceptual impact of this error.
][
  大多数函数可以分解为移位正弦波的加权和。 这个显著的事实最早由约瑟夫·傅里叶描述，傅里叶变换将一个函数转换为这种表示。 函数的这种频率空间表示提供了对其某些特征的洞察——正弦函数中的频率分布对应于原始函数中的频率分布。 使用这种形式，可以使用傅里叶分析来深入了解采样和重建过程引入的误差以及如何减少这种误差的感知影响。
]

#parec[
  The Fourier transform of a 1D function $f (x)$ is #footnote[The reader should be warned that the constants in front of these integrals are not always the same in different fields.  For example, some authors (including many in the physics community) prefer to multiply both integrals by $1 \/ sqrt(2π)$.]
][
  一维函数 $f (x)$ 的傅里叶变换是#footnote[读者应当注意，这些积分前的常数在不同领域中并不总是相同的。例如，一些作者（包括物理学界的许多作者）更喜欢将两个积分都乘以 $1 \/ sqrt(2π)$。]
]


$ cal(F) (omega) = integral_(- oo)^oo f (x) e^(- i 2 pi theta x) thin d x $ <fourier-analysis>
#parec[
  (Recall that $e^(i x) = cos (x) + i sin (x)$, where $i = sqrt(- 1)$.) For simplicity, here we will consider only #emph[even] functions where $f (- x) = f (x)$, in which case the Fourier transform of $f$ has no imaginary terms. The new function $cal(F)$ is a function of #emph[frequency];, $theta$.#footnote[In this chapter, we will use the
    &omega; symbol to denote frequency.  Throughout the rest of the book,
    &omega; denotes normalized direction vectors.  This overloading of
    notation should never be confusing, given the contexts where these symbols
    are used.  Similarly, when we refer to a function's “spectrum” in this
    chapter, we are
    referring to its distribution of frequencies in its frequency space
    representation.] We will denote the Fourier transform operator by $cal(F)$, such that $cal(F) { f (x) } = cal(F) (omega)$. $cal(F)$ is clearly a linear operator—that is, $cal(F) { a f (x) } = a cal(F) { f (x) }$ for any scalar $a$, and $cal(F) { f (x) + g (x) } = cal(F) { f (x) } + cal(F) { g (x) } .$ The Fourier transform has a straightforward generalization to multidimensional functions where $omega$ is a corresponding multidimensional value, though we will generally stick to the 1D case for notational simplicity.
][
  （回忆一下， $e^(i x) = cos (x) + i sin (x)$，其中 $i = sqrt(- 1)$。）为简单起见，这里我们只考虑#emph[偶];函数，其中 $f (- x) = f (x)$，在这种情况下， $f$ 的傅里叶变换没有虚数项。新函数 $cal(F)$ 是一个关于#emph[频率] $omega$ 的函数。#footnote[在本章中，我们将使用 $omega$ 符号表示频率。在本书的其余部分，$omega$ 表示归一化方向向量。鉴于这些符号所使用的上下文，这种符号重载应该不会引起混淆。同样，当我们在本章中提到函数的“频谱”时，我们指的是其在频率空间表示中的频率分布。] 我们将用 $cal(F)$ 表示傅里叶变换算子，使得 $cal(F){ f (x) } = F (omega)$。显然， $cal(F)$ 是一个线性算子，即 $cal(F) { a f (x) } = a cal(F) { f (x) }$ 对于任意标量 $a$，且 $cal(F) { f (x) + g (x) } = cal(F) { f (x) } + cal(F) { g (x) }$。傅里叶变换可以简单地推广到多维函数，其中 $omega$ 是相应的多维值，但为了符号简单，我们通常坚持使用一维情况。
]

#parec[
  @eqt:fourier-analysis is called the #emph[Fourier analysis] equation, or sometimes just the #emph[Fourier transform];. We can also transform from the frequency domain back to the spatial domain using the #emph[Fourier
    synthesis] equation, or the #emph[inverse Fourier transform];:
][
  @eqt:fourier-analysis 被称为#emph[傅里叶分析];方程，或有时仅称为#emph[傅里叶变换];。我们也可以使用#emph[傅里叶合成];方程或#emph[逆傅里叶变换];从频域变换回空间域：
]

$ f (x) = integral_(- oo)^oo F (omega) e^(i 2 pi omega x) thin d omega $ <fourier-synthesis>


#parec[
  @tbl:fourier-pairs shows a number of important functions and their frequency space representations. A number of these functions are based on the Dirac delta distribution, which is defined such that $integral delta (x) thin d x = 1$, and for all $x eq.not 0$, $delta (x) = 0$. An important consequence of these properties is that
][
  @tbl:fourier-pairs-zh 显示了一些重要函数及其频率空间表示。这些函数中的一些基于狄拉克$delta$分布，其定义为 $integral delta (x) thin d x = 1$，且对于所有 $x eq.not 0$， $delta (x) = 0$。这些性质导致的一个重要结果是
]

$ integral f (x) delta (x) thin d x = f (0) . $


#parec[
  The delta distribution cannot be expressed as a standard mathematical function, but instead is generally thought of as the limit of a unit area box function centered at the origin with width approaching 0.
][
  $delta$ 分布不能表示为标准数学函数，而通常被认为是一个具有单位面积、中心在原点处的、宽度趋近于0的盒函数。
]

#parec[
  #block(
    inset: 8pt,
    radius: 4pt,
    stroke: .1pt,
  )[
    #figure(
      align(left)[#table(
        stroke: (x: none, y: .1pt),
        columns: (50%, 50%),
        align: (auto, auto),
        fill: (_, y) => if y == 0 { gray.lighten(90%) } else { gray.lighten(95%) },
        table.header([Spatial Domain], [Frequency Space Representation]),
        table.hline(stroke: .5pt),
        [Box: $f (x) = 1$ if $lr(|x|) < 1 \/ 2$, $0$ otherwise],
        [Sinc: $f (theta) = upright("sinc") (theta) = sin (pi theta) \/ (pi theta)$],

        [Gaussian: $f (x) = e^(- pi x^2)$], [Gaussian: $f (theta) = e^(- pi theta^2)$],
        [Constant: $f (x) = 1$], [Delta: $f (theta) = delta (theta)$],

        [Sinusoid: $f (x) = cos (x)$],
        [Translated delta:\ $f (theta) = pi (delta (1 - 2 pi theta) + delta (1 + 2 pi theta))$],

        [Shah: $f (x) = upright("III")_T (x) = T sum_i delta (x - T_i)$],
        [Shah:\ $f (theta) = upright("III")_(1 \/ T) (theta) = (1 \/ T) sum_i delta (theta - i \/ T)$],
        table.hline(stroke: 0pt),
      )],
      kind: table,
      caption: [
        Fourier Pairs. Functions in the spatial domain and their frequency space representations. Because of the symmetry properties of the Fourier transform, if the left column is instead considered to be frequency space, then the right column is the spatial equivalent of those functions as well.
      ],
    ) <fourier-pairs>
  ]
][
  #block(
    inset: 8pt,
    radius: 4pt,
    stroke: .1pt,
  )[
    #figure(
      align(left)[#table(
        stroke: (x: none, y: .1pt),
        columns: (50%, 50%),
        align: (auto, auto),
        fill: (_, y) => if y == 0 { gray.lighten(90%) } else { gray.lighten(95%) },
        table.header([空域（Spatial Domain）], [频域表示（Frequency Space Representation）]),
        table.hline(stroke: .5pt),
        [Box: $f (x) = 1$ if $lr(|x|) < 1 \/ 2$, $0$ otherwise],
        [Sinc: $f (theta) = upright("sinc") (theta) = sin (pi theta) \/ (pi theta)$],

        [Gaussian: $f (x) = e^(- pi x^2)$], [Gaussian: $f (theta) = e^(- pi theta^2)$],
        [Constant: $f (x) = 1$], [Delta: $f (theta) = delta (theta)$],

        [Sinusoid: $f (x) = cos (x)$],
        [Translated delta:\ $f (theta) = pi (delta (1 - 2 pi theta) + delta (1 + 2 pi theta))$],

        [Shah: $f (x) = upright("III")_T (x) = T sum_i delta (x - T_i)$],
        [Shah:\ $f (theta) = upright("III")_(1 \/ T) (theta) = (1 \/ T) sum_i delta (theta - i \/ T)$],
        table.hline(stroke: 0pt),
      )],
      kind: table,
      caption: [
        傅里叶对。空间域中的函数及其频率空间表示。由于傅里叶变换的对称性，如果左列被视为频率空间，则右列也是这些函数的空间等价物。
      ],
    ) <fourier-pairs-zh>
  ]
]



=== Ideal Sampling and Reconstruction
<ideal-sampling-and-reconstruction>

#parec[
  Using frequency space analysis, we can now formally investigate the properties of sampling. Recall that the sampling process requires us to choose a set of equally spaced sample positions and compute the function's value at those positions. Formally, this corresponds to multiplying the function by a "shah," or "impulse train," function, an infinite sum of equally spaced delta functions. The shah $upright("III")_T (x)$ is defined as
][
  利用频率空间分析，我们现在可以正式研究采样的性质。回忆一下，采样过程需要我们选择一组等间距的采样位置并计算函数在这些位置的值。正式地，这对应于将函数乘以一个“Shah函数”或“脉冲列”函数，即一个无穷多个等间距$delta$函数的和。Shah函数 $upright("III")_T (x)$ 定义为
]


$ upright("III")_T (x) = T sum_(i = - oo)^oo delta (x - i T) , $

#parec[
  where $T$ defines the period, or #emph[sampling rate];. This formal definition of sampling is illustrated in @fig:formal-sampling . The multiplication yields an infinite sequence of values of the function at equally spaced points:
][
  其中 $T$ 定义了周期或#emph[采样率];。采样的正式定义如@fig:formal-sampling 所示。乘法产生了函数在等间距点上的无限序列值：
]

$ upright("III")_T (x) f (x) = T sum_i delta (x - i T) f (i T) . $

#figure(
  image("../pbr-book-website/4ed/Sampling_and_Reconstruction/pha08f04.svg"),
  caption: [
    #ez_caption[
      Formalizing the Sampling Process. (a) The function $f (x)$ is multiplied by (b) the shah function $upright("III")_T (x)$, giving (c) an infinite sequence of scaled delta functions that represent its value at
      each sample point.
    ][
      采样过程的形式化描述。 (a) 函数 $f (x)$ 被 (b) 沙赫函数 $upright("III")_T (x)$ 乘以，得到 (c) 表示其在每个采样点值的缩放的$delta$函数的无限序列。
    ]
  ],
)<formal-sampling>

#parec[
  These sample values can be used to define a reconstructed function $limits(f)^tilde.basic$ by choosing a reconstruction filter function $r(x)$ and computing the _convolution_.
][
  这些样本值可以用来定义一个重构函数 $limits(f)^tilde.basic$，方法是选择一个重建滤波器函数 $r(x)$ 并计算它们的_卷积_。
]
$ (upright("III")_T (x) f (x)) times.circle r (x) , $
#parec[
  where the convolution operation $times.circle$ is defined as
][
  其中卷积运算 $times.circle$ 定义为
]

$ f (x) times.circle g (x) = integral_(- oo)^oo f (x prime) g (x - x prime) thin d x prime . $

#parec[
  For reconstruction, convolution gives a weighted sum of scaled instances of the reconstruction filter centered at the sample points:
][
  对于重建而言，卷积得到的是以样本点为中心、经过缩放的重建滤波器实例的_加权和_：
]

$ tilde(f) (x) = T sum_(i = - oo)^oo f (i T) r (x - i T) . $

#parec[
  For example, in @fig:1d-sample, the triangle reconstruction filter, $r (x) = max (0 , 1 - lr(|x|))$, was used. @fig:recon-filter-at-samples shows the scaled triangle functions used for that example.
][
  例如，在@fig:1d-sample 中，使用了三角重建滤波器， $r (x) = max (0 , 1 - lr(|x|))$。@fig:recon-filter-at-samples 展示了用于该示例的缩放三角函数。
]

#figure(
  image("../pbr-book-website/4ed/Sampling_and_Reconstruction/pha08f05.svg"),
  caption: [
    #ez_caption[The sum of instances of the triangle reconstruction filter,
      shown with dashed lines, gives the reconstructed approximation to the
      original function, shown with a solid line.][三角重建滤波器实例的总和，用虚线表示，给出了对原始函数的重建近似，用实线表示。]
  ],
)<recon-filter-at-samples>


#parec[
  We have gone through a process that may seem gratuitously complex in order to end up at an intuitive result: the reconstructed function $tilde(f) (x)$ can be obtained by interpolating among the samples in some manner. By setting up this background carefully, however, we can now apply Fourier analysis to the process more easily.
][
  我们经历了一个看似复杂的过程，但最终得到了一个直观的结果：重建的函数 $tilde(f) (x)$ 可以通过某种方式在样本之间插值获得。然而，通过仔细设置这个背景，我们现在可以更容易地将傅里叶分析应用于这个过程。
]

#parec[
  We can gain a deeper understanding of the sampling process by analyzing the sampled function in the frequency domain. In particular, we will be able to determine the conditions under which the original function can be exactly recovered from its values at the sample locations—a very powerful result. For the discussion here, we will assume for now that the function $f (x)$ is #emph[band limited];—there exists some frequency $omega_0$ such that $f (x)$ contains no frequencies greater than $omega_0$. By definition, band-limited functions have frequency space representations with compact support, such that $F (omega) = 0$ for all $lr(|omega|) > omega_0$. Both of the spectra in @fig:low-high-frequency-space are band limited.
][
  通过在频域中分析采样函数，我们可以更深入地理解采样过程。特别是，我们将能够确定在何种条件下可以从采样位置的值精确恢复原始函数——这是一个非常强大的结果。在这里的讨论中，我们暂时假设函数 $f (x)$ 是#emph[带限的];——存在某个频率 $omega_0$，使得 $f (x)$ 不包含大于 $omega_0$ 的频率。根据定义，带限函数在频率空间中具有紧支撑的表示形式，使得对于所有 $lr(|omega|) > omega_0$， $F (omega) = 0$。@fig:low-high-frequency-space 中的两个频谱都是带限的。
]

#parec[
  An important idea used in Fourier analysis is the fact that the Fourier transform of the product of two functions $cal(F) { f (x) g (x) }$ can be shown to be the convolution of their individual Fourier transforms $F (omega)$ and $G (omega)$ :
][
  傅里叶分析中使用的一个重要思想是，两个函数 $cal(F) { f (x) g (x) }$ 的乘积的傅里叶变换可以被证明为它们各自傅里叶变换 $F (omega)$ 和 $G (omega)$ 的卷积：
]

$ cal(F) {f (x) g (x)} = F (omega) times.circle G (omega) . $<fourier-convolution-first>

#parec[
  It is similarly the case that convolution in the spatial domain is equivalent to multiplication in the frequency domain:
][
  同样，在空间域中的卷积运算等同于频域中的乘法运算：
]

$ cal(F) {f (x) times.circle g (x)} = F (omega) G (omega) . $<eq-fourier-convolution>

#parec[
  These properties are derived in the standard references on Fourier analysis. Using these ideas, the original sampling step in the spatial domain, where the product of the shah function and the original function $f (x)$ is found, can be equivalently described by the convolution of $F (omega)$ with another shah function in frequency space.
][
  这些性质在傅里叶分析的标准参考中得出。利用这些思想，空间域中的原始采样步骤，即找到shah函数与原始函数 $f (x)$ 的乘积，可以等效地描述为 $F (omega)$ 与频率空间中的另一个shah函数的卷积。
]

#parec[
  We also know the spectrum of the shah function $"III"_T (x)$ from Table 8.1; the Fourier transform of a shah function with period $T$ is another shah function with period $1 \/ T$. This reciprocal relationship between periods is important to keep in mind: it means that if the samples are farther apart in the spatial domain, they are closer together in the frequency domain.
][
  我们还知道来自@tbl:fourier-pairs-zh 的shah函数 $"III"_T (x)$ 的频谱；周期为 $T$ 的shah函数的傅里叶变换是周期为 $1 \/ T$ 的另一个shah函数。这个周期之间的倒数关系很重要：这意味着如果样本在空间域中更远，它们在频域中就更近。
]

#parec[
  Thus, the frequency domain representation of the sampled signal is given by the convolution of $F (omega)$ and this new shah function. Convolving a function with a delta function just yields a copy of the function, so convolving with a shah function yields an infinite sequence of copies of the original function, with spacing equal to the period of the shah (@fig:convolved-sampled). This is the frequency space representation of the series of samples.
][
  因此，采样信号的频域表示由 $F (omega)$ 和这个新的沙赫函数的卷积给出。将一个函数与δ函数卷积只会产生该函数的一个副本，因此与沙赫函数卷积会产生原始函数的无限序列副本，间距等于shah的周期（@fig:convolved-sampled）。这是样本序列的频率空间表示。
]


#figure(
  image("../pbr-book-website/4ed/Sampling_and_Reconstruction/pha08f06.svg"),
  caption: [
    #ez_caption[
      The Convolution of $F (omega)$ and the Shah Function. The
      result is infinitely many copies of $F$.
    ][
      $F (omega)$ 和shah函数的卷积。 结果是 $F$ 的无限多个副本。
    ]
  ],
)<convolved-sampled>


#parec[
  Now that we have this infinite set of copies of the function's spectrum, how do we reconstruct the original function? Looking at @fig:convolved-sampled, the answer is obvious: just discard all of the spectrum copies except the one centered at the origin, giving the original $F (omega)$.
][
  现在我们有了这个函数频谱的无限集合副本，如何重建原始函数呢？查看@fig:convolved-sampled，答案显而易见：只需丢弃所有的频谱副本，除了以原点为中心的那个，得到原始的 $F (omega)$。
]



#figure(
  image("../pbr-book-website/4ed/Sampling_and_Reconstruction/pha08f07.svg"),
  caption: [
    #ez_caption[
      Multiplying (a) a series of copies of $F (omega)$ by (b) the
      appropriate box function yields (c) the original spectrum.
    ][
      将 (a) $F (omega)$ 的一系列副本与 (b) 适当的盒函数相乘，得到 (c)
      原始频谱。
    ]
  ],
)<low-pass-filter>



#parec[
  In order to throw away all but the center copy of the spectrum, we multiply by a box function of the appropriate width (@fig:low-pass-filter). The box function $Pi_T (x)$ of width $T$ is defined as
][
  为了丢弃除中心频谱副本之外的所有副本，我们乘以一个适当宽度的盒函数（@fig:low-pass-filter）。宽度为 $T$ 的盒函数 $Pi_T (x)$ 定义为
]


$ Pi_T (x) = cases(delim: "{", 1 \/ T comma & upright("if ") lr(|x|) < T \/ 2, 0 & upright("otherwise")) $


#parec[
  This multiplication step corresponds to convolution with the reconstruction filter in the spatial domain. This is the ideal sampling and reconstruction process. To summarize:
][
  这个乘法步骤对应于在空间域中与重建滤波器的卷积。这是理论上的理想采样和重建过程。总结如下：
]

$ tilde(F) = (F (omega) times.circle "III"_(1\/T) (omega)) Pi_(1 \/ T) (omega) $


#parec[
  This is a remarkable result: we have been able to determine the exact frequency space representation of $f (x)$, purely by sampling it at a set of regularly spaced points. Other than knowing that the function was band limited, no additional information about the composition of the function was used.
][
  这是一个显著的成果：我们能够仅通过在一组规则间隔的点上采样，确定 $f (x)$ 的确切频率空间表示。除了知道函数是带限（频率有限）的外，没有使用关于函数组成的额外信息。
]

#parec[
  Applying the equivalent process in the spatial domain will likewise recover $f (x)$ exactly. Because the inverse Fourier transform of the box function is the sinc function, ideal reconstruction in the spatial domain is
][
  在空间域中应用等效过程同样可以精确恢复 $f (x)$。因为盒函数的傅里叶逆变换是 sinc 函数（具有无限范围的函数），所以在空间域中的理想重建是
]

$ tilde(f) = (f (x) times.circle I_T (x)) dot.op upright("sinc")_T (x) , $


#parec[
  where $sinc_T (x) = sinc(T x)$, and thus
][
  其中 $sinc_T (x) = sinc(T x)$，因此
]


$ tilde(f) (x) = sum_(i = - oo)^oo upright("sinc") (x - T i) f (T i) . $<ideal-reconstruction-1d>


#parec[
  Unfortunately, because the sinc function has infinite extent, it is necessary to use all the sample values $f (T i)$ to compute any particular value of $tilde(f)(x)$ in the spatial domain. Filters with finite spatial extent are preferable for practical implementations even though they do not reconstruct the original function perfectly.
][
  不幸的是，由于 sinc 函数具有无限的范围，计算空间域中任何特定值的 $tilde(f) (x)$ 时，必须使用所有的样本值 $f (T i)$。在实际应用中，有限空间范围的滤波器更为可取，尽管它们不能完美地重建原始函数。
]

#parec[
  A commonly used alternative in graphics is to use the box function for reconstruction, effectively averaging all the sample values within some region around $x$. This is a poor choice, as can be seen by considering the box filter's behavior in the frequency domain: This technique attempts to isolate the central copy of the function's spectrum by #emph[multiplying by a sinc];, which not only does a bad job of selecting the central copy of the function's spectrum but includes high-frequency contributions from the infinite series of other copies of it as well.
][
  在图形学中常用的替代方法是使用盒函数（矩形函数）进行重建，有效地对 $x$ 周围某个区域内的所有样本值进行平均。这是一个不好的选择，因为通过考虑盒滤波器在频率域中的行为可以看出：这种技术试图通过#emph[乘以sinc] 来隔离函数频谱的中心副本，这不仅在选择函数频谱的中心副本时表现不佳，还包括来自其他无限系列副本的高频贡献。
]
=== Aliasing
#parec[
  Beyond the issue of the sinc function's infinite extent, one of the most serious practical problems with the ideal sampling and reconstruction approach is the assumption that the signal is band limited. For signals that are not band limited, or signals that are not sampled at a sufficiently high sampling rate for their frequency content, the process described earlier will reconstruct a function that is different from the original signal. Both the underlying problem and mitigation strategies for it can be understood using Fourier analysis.
][
  除了 sinc 函数无限范围的问题外，理想采样和重建方法的一个最严重的实际问题是假设信号是带限的。对于非带限信号，或者对于其频率内容未以足够高的采样率采样的信号，前面描述的过程将重建出一个与原始信号不同的函数。可以通过傅里叶分析理解基本问题和缓解策略。
]

#parec[
  The key to successful reconstruction is the ability to exactly recover the original spectrum $F (omega)$ by multiplying the sampled spectrum with a box function of the appropriate width. Notice that in @fig:convolved-sampled, the copies of the signal's spectrum are separated by empty space, so perfect reconstruction is possible. Consider what happens, however, if the original function was sampled with a lower sampling rate. Recall that the Fourier transform of a shah function $I_T$ with period $T$ is a new shah function with period $1 \/ T$. This means that if the spacing between samples increases in the spatial domain, the sample spacing decreases in the frequency domain, pushing the copies of the spectrum $F (omega)$ closer together. If the copies get too close together, they start to overlap.
][
  成功重建的关键是能够通过将采样频谱与适当宽度的盒函数相乘，精确恢复原始频谱 $F (omega)$。请注意，在@fig:convolved-sampled 中，信号频谱的副本之间有空白空间，因此可以实现完美重建。然而，考虑如果原始函数以较低的采样率采样会发生什么。回想一下，周期为 $T$ 的 shah 函数 $I_T$ 的傅里叶变换是一个周期为 $1 \/ T$ 的新 shah 函数。这意味着如果样本间距在空间域中增加，则样本间距在频率域中减少，将频谱 $F (omega)$ 的副本推得更近。如果副本靠得太近，它们就会开始重叠。
]

#parec[
  Because the copies are added together, the resulting spectrum no longer looks like many copies of the original (@fig:aliased-spectrum). When this new spectrum is multiplied by a box function, the result is a spectrum that is similar but not equal to the original $F (omega)$ : high-frequency details in the original signal leak into lower-frequency regions of the spectrum of the reconstructed signal. These new low-frequency artifacts are called #emph[aliases] (because high frequencies are "masquerading" as low frequencies), and the resulting signal is said to be #emph[aliased];. It is sometimes useful to distinguish between artifacts due to sampling and those due to reconstruction; when we wish to be precise we will call sampling artifacts #emph[prealiasing] and reconstruction artifacts #emph[postaliasing];. Any attempt to fix these errors is broadly classified as #emph[antialiasing];.
][
  由于副本是相加的，结果频谱不再像原始的许多副本（@fig:aliased-spectrum）。当这个新频谱与盒函数相乘时，结果是一个类似但不等于原始 $F (omega)$ 的频谱：原始信号中的高频细节泄漏到重建信号频谱的低频区域。这些新的低频伪影称为#emph[混叠（aliases）];（因为高频“伪装”成低频），结果信号被称为#emph[混叠（aliased）];。 有时区分由于采样和由于重建引起的伪影是有用的；当我们希望精确时，我们将采样伪影称为#emph[预混叠];（采样引起的伪影），重建伪影称为#emph[后混叠];（重建引起的伪影）。任何修正这些错误的尝试都被广泛归类为#emph[抗混叠（postaliasing）];（减少混叠伪影的技术）。
]

#figure(
  image("../pbr-book-website/4ed/Sampling_and_Reconstruction/pha08f08.svg"),
  caption: [
    #ez_caption[
      (a) When the sampling rate is too low, the copies of the function's spectrum overlap, resulting in (b) aliasing when reconstruction is performed.
    ][
      (a) 当采样率过低时，函数频谱的副本重叠，导致 (b) 重建时出现混叠。
    ]
  ],
)<aliased-spectrum>



#parec[
  @fig:aliasing-basic shows the effects of aliasing from undersampling and then reconstructing the 1D function $f (x) = 1 + cos (4 pi x^2)$.
][
  @fig:aliasing-basic 显示了从欠采样然后重建 1D 函数 $f (x) = 1 + cos (4 pi x^2)$ 的混叠效应。
]

#figure(
  image("../pbr-book-website/4ed/Sampling_and_Reconstruction/pha08f09.svg"),
  caption: [
    #ez_caption[
      Aliasing from Point Sampling the Function
      $1 + cos (4 pi x^2)$. (a) The function. (b) The reconstructed function
      from sampling it with samples spaced $0.125$ units apart and performing
      perfect reconstruction with the sinc filter. Aliasing causes the
      high-frequency information in the original function to be lost and to
      reappear as lower-frequency error.
    ][
      从点采样函数 $1 + cos (4 pi x^2)$ 的混叠。 (a) 函数。(b) 从以
      0.125 单位间隔采样并使用 sinc
      滤波器进行完美重建的重建函数。混叠导致原始函数中的高频信息丢失并重新出现为低频误差。
    ]
  ],
)<aliasing-basic>





#parec[
  A possible solution to the problem of overlapping spectra is to simply increase the sampling rate until the copies of the spectrum are sufficiently far apart not to overlap, thereby eliminating aliasing completely. The #emph[sampling theorem] tells us exactly what rate is required. This theorem says that as long as the frequency of uniformly spaced sample points $omega_s$ is greater than twice the maximum frequency present in the signal $omega_0$, it is possible to reconstruct the original signal perfectly from the samples. This minimum sampling frequency is called the #emph[Nyquist frequency];.
][
  解决频谱重叠问题的一种可能方法是简单地增加采样率，直到频谱的副本足够远以至于不重叠，从而完全消除混叠。#emph[采样定理];准确地告诉我们需要什么速率。该定理指出，只要均匀间隔的采样点的频率 $omega_s$ 大于信号中存在的最大频率的两倍 $omega_0$，就可以从样本中完美重建原始信号。这个最小采样频率称为#emph[奈奎斯特频率];（避免混叠的最低采样频率）。
]

#parec[
  However, increasing the sampling rate is expensive in a ray tracer: the time to render an image is directly proportional to the number of samples taken. Furthermore, for signals that are not band limited ( $omega_0 = oo$ ), it is impossible to sample at a high enough rate to perform perfect reconstruction. Non-band-limited signals have spectra with infinite support, so no matter how far apart the copies of their spectra are (i.e., how high a sampling rate we use), there will always be overlap.
][
  然而，在光线追踪器中增加采样率是昂贵的：生成图像的时间与采样数量直接成正比。此外，对于非带限信号（ $omega_0 = oo$ ），不可能以足够高的速率采样以进行完美重建。非带限信号的频谱具有无限支持，因此无论其频谱的副本相隔多远（即我们使用多高的采样率），总会有重叠。
]

#parec[
  Unfortunately, few of the interesting functions in computer graphics are band limited. In particular, any function containing a discontinuity cannot be band limited, and therefore we cannot perfectly sample and reconstruct it. This makes sense because the function's discontinuity will always fall between two samples and the samples provide no information about the location of the discontinuity. Thus, it is necessary to apply different methods besides just increasing the sampling rate in order to counteract the error that aliasing can introduce to the renderer's results.
][
  不幸的是，计算机图形学中很少有有趣的函数是带限的。特别是，任何包含不连续性（函数中的断点）的函数都不是带限的，因此我们不能完美地采样和重建它。这是有道理的，因为函数的不连续性总是落在两个样本之间，样本不提供关于不连续位置的信息。因此，除了仅仅增加采样率外，还必须应用不同的方法来抵消混叠可能对渲染器结果引入的误差。
]


=== Understanding Pixels
<understanding-pixels>
#parec[
  With this understanding of sampling and reconstruction in mind, it is worthwhile to establish some terminology and conventions related to pixels.
][
  在理解采样和重建的基础上，有必要建立一些与像素相关的术语和惯例。
]

#parec[
  The word "pixel" is used to refer to two different things: physical elements that either emit or measure light (as used in displays and digital cameras) and regular samples of an image function (as used for image textures, for example). Although the pixels in an image may be measured by the pixels in a camera's sensor, and although the pixels in an image may be used to set the emission from pixels in a display, it is important to be attentive to the differences between them.
][
  "像素"这个词用于指代两种不同的事物：发射或测量光的物理元素（如显示器和数码相机中使用的）和图像函数的常规样本（例如用于图像纹理）。 尽管图像中的像素可能由相机传感器中的像素测量，并且图像中的像素可能用于设置显示器中像素的发射，但注意它们之间的差异是很重要的。
]

#parec[
  The pixels that constitute an image are defined to be point samples of an image function at discrete points on the image plane; there is no "area" associated with an image pixel. As Alvy Ray Smith (1995) has emphatically pointed out, thinking of the pixels in an image as small squares with finite area is an incorrect mental model that leads to a series of errors. We may filter the continuously defined image function over an area to compute an image pixel value, though we will maintain the distinction in that case that a pixel represents a point sample of a filtered function.
][
  构成图像的像素被定义为图像平面上离散点处图像函数的点样本；图像像素没有“面积”相关联。 正如 Alvy Ray Smith（1995）强烈指出的那样，将图像中的像素误认为是具有有限面积的小方块是一种错误的思维模型，会导致一系列错误。 我们可以在一个区域上过滤连续定义的图像函数来计算图像像素值，尽管在这种情况下我们将保持区分，即像素表示过滤函数的点样本。
]

#parec[
  A related issue is that the pixels in an image are naturally defined at discrete integer $(x , y)$ coordinates on a pixel grid, but it will often be useful to consider an image as a continuous function of $(x , y)$ positions. The natural way to map between these two domains is to round continuous coordinates to the nearest discrete coordinate; doing so is appealing since it maps continuous coordinates that happen to have the same value as discrete coordinates to that discrete coordinate. However, the result is that given a set of discrete coordinates spanning a range $[x_0 , x_1]$, the set of continuous coordinates that covers that range is $\[ x_0 - 1 \/ 2 , x_1 + 1 \/ 2 \)$. Thus, any code that generates continuous sample positions for a given discrete pixel range is littered with $1 \/ 2$ offsets. It is easy to forget some of these, leading to subtle errors.
][
  一个相关的问题是，图像中的像素自然地在像素网格上的离散整数 $(x , y)$ 坐标处定义，但通常将图像视为 $(x , y)$ 位置的连续函数是有用的。 在这两个域之间映射的自然方法是将连续坐标舍入到最近的离散坐标；这样做很有吸引力，因为它将恰好与离散坐标具有相同值的连续坐标映射到该离散坐标。 然而，结果是给定一个范围是 $[x_0 , x_1]$ 的离散坐标集，覆盖该范围的连续坐标集是 $\[ x_0 - 1 \/ 2 , x_1 + 1 \/ 2 \)$。 因此，任何为给定离散像素范围生成连续样本位置的代码都充满了 $1 \/ 2$ 的偏移。 很容易忘记其中的一些，导致微妙的错误。
]

#parec[
  A better convention is to truncate continuous coordinates $c$ to discrete coordinates $d$ by
][
  一个更好的惯例是通过
]

$ d = ⌊c⌋ , $

#parec[
  and convert from discrete to continuous by
][

  将连续坐标 $c$ 截断为离散坐标 $d$，并通过
]
$ c = d + 1 / 2 . $

#parec[][
  从离散转换为连续。
]

#parec[
  In this case, the range of continuous coordinates for the discrete range $[x_0 , x_1]$ is naturally $\[ x_0 , x_1 + 1 \)$, and the resulting code is much simpler (Heckbert 1990a). This convention, which we have adopted in `pbrt`, is shown graphically in Figure 8.10.
][
  在这种情况下，离散范围 $[x_0 , x_1]$ 的连续坐标范围自然是 $\[ x_0 , x_1 + 1 \)$，结果代码要简单得多（Heckbert 1990a）。 我们在 `pbrt` 中采用的这种惯例在图 8.10 中以图形方式显示。
]


#figure(
  image("../pbr-book-website/4ed/Sampling_and_Reconstruction/pha08f10.svg"),
  caption: [
    #ez_caption[
      Pixels in an image can be addressed with either discrete or continuous coordinates. A discrete image five pixels wide covers the continuous pixel range $\[0,5\)$. A particular discrete pixel ’s coordinate in the continuous representation is $d+1\/2$.
    ][
      图像中的像素可以用离散坐标或连续坐标来表示。一个宽度为五个像素的离散图像覆盖了连续像素范围 $\[0,5\)$。特定离散像素在连续表示中的坐标是 $d+1\/2$。
    ]
  ],
)<pixel-position-truncate>


=== Sampling and Aliasing in Rendering
<sampling-and-aliasing-in-rendering>
#parec[
  The application of the principles of sampling theory to the 2D case of sampling and reconstructing images of rendered scenes is straightforward: we have an image, which we can think of as a function of 2D $(x , y)$ image locations to radiance values $L$ :
][
  将采样理论的原理应用于渲染场景图像的二维采样和应用于重建情况是直接的：我们有一个图像，我们可以将其视为二维 $(x , y)$ 图像位置到辐射值 $L$ 的函数：
]

$ f (x , y) arrow.r L . $

#parec[
  It is useful to generalize the definition of the scene function to a higher-dimensional function that also depends on the time $t$ and $(u , v)$ lens position at which it is sampled. Because the rays from the camera are based on these five quantities, varying any of them gives a different ray and thus a potentially different value of $f$. For a particular image position, the radiance at that point will generally vary across both time (if there are moving objects in the scene) and position on the lens (if the camera has a finite-aperture lens).
][
  将场景函数的定义推广到一个更高维度的函数也是有用的，该函数还依赖于采样时的时间 $t$ 和 $(u , v)$ 镜头位置。 因为相机的光线是基于这五个量的，改变其中任何一个都会产生不同的光线，从而可能产生不同的 $f$ 值。 对于特定的图像位置，该点的辐射通常会随时间（如果场景中有移动的物体）和镜头上的位置（如果相机有一个有限光圈镜头）而变化。
]

#parec[
  Even more generally, because the integrators defined in @light-transport-i-surface-reflection through @wavefront-rendering-on-gpus use Monte Carlo integration to estimate the radiance along a given ray, they may return a different radiance value when repeatedly given the same ray. If we further extend the scene radiance function to include sample values used by the integrator (e.g., values used to choose points on area light sources for illumination computations), we have an even higher-dimensional image function
][
  更一般地，由于@light-transport-i-surface-reflection 到 @wavefront-rendering-on-gpus 中定义的积分器使用蒙特卡罗积分来估计沿给定光线的辐射，因此当多次给出相同光线时，它们可能返回不同的辐射值。 如果我们进一步扩展场景辐射函数以包括积分器使用的样本值（例如，用于选择区域光源上点以进行照明计算的值），我们就有一个更高维度的图像函数
]

$ f (x , y , t , u , v , i_1 , i_2 , dots.h) arrow.r L . $

#parec[
  Sampling all of these dimensions well is an important part of generating high-quality imagery efficiently. For example, if we ensure that nearby $(x , y)$ positions on the image tend to have dissimilar $(u , v)$ positions on the lens, the resulting rendered images will have less error because each sample is more likely to account for information about the scene that its neighboring samples do not. The #link("../Sampling_and_Reconstruction/Sampling_Interface.html#Sampler")[Sampler] class implementations later in this chapter will address the issue of sampling all of these dimensions effectively.
][
  良好地采样所有这些维度是高效生成高质量图像的重要部分。 例如，如果我们确保图像上的相邻 $(x , y)$ 位置趋向于在镜头上具有不同的 $(u , v)$ 位置，则生成的渲染图像将具有更少的误差，因为每个样本更有可能考虑到其邻近样本未包含的场景信息。 本章后面的 #link("../Sampling_and_Reconstruction/Sampling_Interface.html#Sampler")[Sampler] 类实现将解决有效采样所有这些维度的问题。
]

==== Sources of Aliasing
<sources-of-aliasing>

#figure(
  image("../pbr-book-website/4ed/Sampling_and_Reconstruction/pha08f11.svg"),
  caption: [
    #ez_caption[Illustration of the Gibbs Phenomenon. When a function has not been sampled at the Nyquist rate and the set of aliased samples is reconstructed with the sinc filter, the reconstructed function will have “ringing” artifacts, where it oscillates around the true function. Here a 1D step function (dashed line) has been sampled with a sample spacing of $0.125$. When reconstructed with the sinc, the ringing appears (solid line).][吉布斯现象的图示。当一个函数没有以奈奎斯特速率采样，并且用sinc滤波器重建了混叠样本集时，重建的函数将出现“振铃”伪影，在真实函数周围振荡。这里以$0.125$的采样间隔对1D阶跃函数（虚线）进行了采样。当用sinc重建时，会出现振铃（实线）。]
  ],
)<sinc-gibbs-ringing>

#parec[
  Geometry is one of the most common causes of aliasing in rendered images. When projected onto the image plane, an object's boundary introduces a step function—the image function's value instantaneously jumps from one value to another.Not only do step functions have infinite frequency content as mentioned earlier, but, even worse, the perfect reconstruction filter causes artifacts when applied to aliased samples: ringing artifacts appear in the reconstructed function, an effect known as the #emph[Gibbs
    phenomenon];. @fig:sinc-gibbs-ringing shows an example of this effect for a 1D function.Choosing an effective reconstruction filter in the face of aliasing requires a mix of science, artistry, and personal taste, as we will see later in this chapter.
][
  几何是渲染图像中混叠最常见的原因之一。 当投影到图像平面上时，物体的边界引入了一个阶跃函数——图像函数的值瞬间从一个值跳到另一个值。 正如前面提到的，阶跃函数具有无限的频率内容，更糟糕的是，完美的重建滤波器在应用于混叠样本时会导致伪影：重建函数中出现振铃伪影，这种效应称为#emph[吉布斯现象];。 @fig:sinc-gibbs-ringing 显示了这种效应的一个一维函数示例。 在混叠的情况下选择有效的重建滤波器需要科学、艺术和个人品味的混合，如我们将在本章后面看到的。
]

#parec[
  Very small objects in the scene can also cause geometric aliasing. If the geometry is small enough that it falls between samples on the image plane, it can unpredictably disappear and reappear over multiple frames of an animation.
][
  场景中的非常小的物体也可能导致几何混叠。 如果几何足够小以至于落在图像平面上的样本之间，它可能会在动画的多个帧中不可预测地消失和重现。
]

#parec[
  Another source of aliasing can come from the texture and materials on an object.#emph[Shading aliasing] can be caused by textures that have not been filtered correctly (addressing this problem is the topic of much of @textures-and-materials) or from small highlights on shiny surfaces. If the sampling rate is not high enough to sample these features adequately, aliasing will result. Furthermore, a sharp shadow cast by an object introduces another step function in the final image. While it is possible to identify the position of step functions from geometric edges on the image plane, detecting step functions from shadow boundaries is more difficult.
][
  另一个混叠来源可能来自物体的纹理和材料。 #emph[着色混叠];可能是由于纹理没有正确过滤（解决这个问题是@textures-and-materials 的大部分内容）或光滑表面上的小高光造成的。 如果采样率不足以充分采样这些特征，就会产生混叠。 此外，物体投下的锐利阴影在最终图像中引入了另一个阶跃函数。 虽然可以从图像平面上的几何边缘识别阶跃函数的位置，但从阴影边界检测阶跃函数更困难。
]

#parec[
  The inescapable conclusion about aliasing in rendered images is that we can never remove all of its sources, so we must develop techniques to mitigate its impact on the quality of the final image.
][
  关于渲染图像中混叠的不可避免的结论是，我们永远无法消除其所有来源，因此我们必须开发技术来减轻其对最终图像质量的影响。
]

==== Adaptive Sampling

#parec[
  One approach that has been applied to combat aliasing is #emph[adaptive
    supersampling:] if we can identify the regions of the signal with frequencies higher than the Nyquist limit, we can take additional samples in those regions without needing to incur the computational expense of increasing the sampling frequency everywhere. It can be difficult to get this approach to work well in practice, because finding all the places where supersampling is needed is difficult. Most techniques for doing so are based on examining adjacent sample values and finding places where there is a significant change in value between the two; the assumption is that the signal has high frequencies in that region.
][
  一种用于对抗混叠的方法是#emph[自适应超采样];：如果我们能够识别出信号中频率高于奈奎斯特极限的区域，我们可以在这些区域进行额外采样，而不需要在所有区域增加采样频率，从而避免计算开销。实际上，要使这种方法有效是很困难的，因为找到所有需要超采样的地方很困难。大多数技术通过检查相邻样本值，寻找两者之间显著变化的地方；假设信号在该区域具有高频率。
]

#parec[
  In general, adjacent sample values cannot tell us with certainty what is really happening between them: even if the values are the same, the functions may have huge variation between them. Alternatively, adjacent samples may have substantially different values without any aliasing actually being present. For example, the texture-filtering algorithms in Chapter 10 work hard to eliminate aliasing due to image maps and procedural textures on surfaces in the scene; we would not want an adaptive sampling routine to needlessly take extra samples in an area where texture values are changing quickly but no excessively high frequencies are actually present.
][
  通常，相邻样本值不能确定地告诉我们它们之间实际发生了什么：即使值相同，函数之间可能存在巨大的变化。或者，相邻样本可能有显著不同的值，而实际上没有混叠。例如，第10章中的纹理过滤算法努力消除由于场景中表面上的图像贴图和程序纹理引起的混叠；我们不希望自适应采样程序在纹理值快速变化但实际上没有过高频率的区域中不必要地进行额外采样。
]

=== Prefiltering

#parec[
  Another approach to eliminating aliasing that sampling theory offers is to filter (i.e., blur) the original function so that no high frequencies remain that cannot be captured accurately at the sampling rate being used. This approach is applied in the texture functions of Chapter 10. While this technique changes the character of the function being sampled by removing information from it, blurring is generally less objectionable than aliasing.
][
  采样理论提供的另一种消除混叠的方法是过滤（即模糊化）原始函数，以便在使用的采样率下没有无法准确捕获的高频率。这种方法应用于第10章的纹理函数中。虽然这种技术通过去除信息改变了被采样函数的特性，但模糊化通常比混叠更容易接受。
]

#parec[
  Recall that we would like to multiply the original function's spectrum with a box filter with width chosen so that frequencies above the Nyquist limit are removed. In the spatial domain, this corresponds to convolving the original function with a sinc filter,
][
  回想一下，我们希望将原始函数的频谱与一个宽度选择为去除高于奈奎斯特极限的频率的盒式滤波器相乘。在空间域中，这对应于将原始函数与sinc滤波器卷积， 。
]
$ f (x) times.circle upright("sinc") (2 omega_s x) $.

#parec[
  In practice, we can use a filter with finite extent that works well. The frequency space representation of this filter can help clarify how well it approximates the behavior of the ideal sinc filter.
][
  实际上，我们可以使用一个有限范围的滤波器，该滤波器效果良好。该滤波器的频率空间表示可以帮助澄清其如何近似理想sinc滤波器的行为。
]

#parec[
  @fig:prefiltered-oned-func shows the function $1 + cos (4 pi x^2)$ convolved with a variant of the sinc with finite extent that will be introduced in Section 8.8. Note that the high-frequency details have been eliminated; this function can be sampled and reconstructed at the sampling rate used in Figure 8.9 without aliasing.
][
  @fig:prefiltered-oned-func 显示了函数 $1 + cos (4 pi x^2)$ 与将在第8.8节中介绍的有限范围的sinc变体卷积的结果。注意，高频细节已被消除；该函数可以在图8.9中使用的采样率下进行采样和重建而不会出现混叠。
]

#figure(
  image("../pbr-book-website/4ed/Sampling_and_Reconstruction/pha08f12.svg"),
  caption: [
    #ez_caption[Graph of the function $1+cos (4 pi x^2)$ convolved with a filter that removes frequencies beyond the Nyquist limit for a sampling rate of $T=0.125$. High-frequency detail has been removed from the function, so that the new function can at least be sampled and reconstructed without aliasing.][函数 $1+cos (4 pi x^2)$ 与一个滤波器卷积后的图像，该滤波器去除了采样率 $T=0.125$ 的奈奎斯特极限以外的频率。函数中的高频细节已被移除，以便新的函数至少能够在不产生混叠的情况下进行采样和重建。]
  ],
)<prefiltered-oned-func>

=== Spectral Analysis of Sampling Patterns
<spectral-analysis-of-sampling-patterns>
#parec[
  Given a fixed sampling rate, the remaining option to improve image quality is to consider how the distribution of sample positions affects the result. We can understand the behavior of deterministic sampling patterns like the shah function in frequency space by considering the convolution of its frequency space representation with a function's frequency space representation.However, we will find it worthwhile to consider #emph[stochastic sampling] methods where the sample positions are specified by one or more random variables. In that case, we will distinguish between the statistical properties of all the sets of samples that the algorithm may generate and a single set of points generated by it (which we will call a #emph[sample pattern];); the former gives much more insight about an algorithm's behavior.
][
  给定一个固定的采样率，改善图像质量的剩余选项是考虑样本位置的分布如何影响结果。我们可以通过考虑其频率空间表示与函数频率空间表示的卷积来理解像shah函数这样的确定性采样模式在频率空间中的行为。 然而，我们会发现值得考虑#emph[随机采样（stochastic sampling）];方法，其中样本位置由一个或多个随机变量指定。在这种情况下，我们将区分算法可能生成的所有样本集的统计特性和由其生成的单个样本集（我们称之为#emph[采样模式（sample pattern）];）；前者提供了更多关于算法行为的见解。
]

#parec[
  A concept known as the #emph[power spectral density] (PSD) is helpful for this task. For a function $f (x)$ that is represented by $F (omega)$ in the Fourier basis, the PSD is defined as:
][
  #emph[功率谱密度];（PSD）的概念对此任务很有帮助。对于在傅里叶基中表示为 $F (omega)$ 的函数 $f (x)$，PSD定义为：
]
$ "P"_f (omega) = F (omega) overline(F (omega)) , $

#parec[
  where $overline(F (omega))$ is the complex conjugate of $F (omega)$. (Under the assumption of an even function $f (x)$, $"P"_f (omega) = F (omega)^2$.) Because the PSD discards nformation about the phase of the signal, the original ourier coefficients cannot be recovered from it.
][
  其中 $overline(F (omega))$ 是 $F (omega)$ 的复共轭。（在假设 $f (x)$ 为偶函数的情况下， $"P"_f (omega) = F (omega)^2$。）由于PSD丢弃了信号相位的信息，无法从中恢复原始傅里叶系数。
]

#parec[
  A useful property of the PSD is that the PSD of the product of two functions $f$ and $g$ in the spatial domain is given by the convolution of their PSDs in the Fourier domain:
][
  PSD的一个有用特性是，空间域中两个函数 $f$ 和 $g$ 的乘积的PSD由其在傅里叶域中的PSD卷积给出：
]
$ "P"_(f g) (omega) = "P"_f (omega) times.circle "P"_g (omega) . $

#parec[
  This property follows directly from @eqt:fourier-convolution-first. Therefore, if we have a point-sampling technique represented by a function $s (x)$ that is defined as a sum of Dirac delta distributions (as the shah function was), then the frequency content from sampling a function $f$ is given by the convolution of $"P"_f$ and $"P"_s$.
][
  该特性直接来自@eqt:fourier-convolution-first。因此，如果我们有一个由狄拉克$delta$分布之和定义的点采样技术表示为函数 $s (x)$ （如shah函数），那么采样函数 $f$ 的频率内容由 $"P"_f$ 和 $"P"_s$ 的卷积给出。
]

#parec[
  In some cases, the PSD of a sampling pattern can be derived analytically: doing so is easy for uniform random sampling, for example. For stochastic sampling patterns without an analytic PSD, the PSD can be computed numerically by averaging over random instances of the sample points. Because each sample point is represented as a Dirac delta distribution, their Fourier transform ends up as a sum over the sample points.#footnote[The  `pspec` program, found in the file `cmd/pspec.cpp` in the  `pbrt` distribution, efficiently computes high-quality visualizations of various sampling patterns' power spectra, using the GPU when one is available.]
][
  在某些情况下，采样模式的PSD可以通过分析推导出来：例如，对于均匀随机采样来说，这很容易。对于没有解析PSD的随机采样模式，可以通过对样本点的随机实例进行平均来数值计算PSD。由于每个样本点表示为狄拉克$delta$分布，其傅里叶变换最终是样本点的总和。#footnote[`pspec` 程序位于 `pbrt` 分发版的 `cmd/pspec.cpp` 文件中，它能高效地计算各种采样模式的功率谱的高质量可视化效果，并在可用时利用 GPU 进行计算。]
]

#parec[
  The ideal sampling pattern's PSD would have a single delta distribution spike at the origin and be zero everywhere else: in that case, sampling would exactly replicate $"P"_f$. Unfortunately, such a sampling pattern would require an infinite sampling density. (This can be understood by considering the inverse Fourier transform of $S (omega) = delta (omega)$, which is a constant function.)
][
  理想采样模式的PSD在原点会有一个单一的$delta$分布尖峰，其他地方为零：在这种情况下，采样将精确复制 $"P"_f$。不幸的是，这样的采样模式需要无限的采样密度。（这可以通过考虑 $S (omega) = delta (omega)$ 的逆傅里叶变换来理解，这是一个常数函数。）
]

#parec[
  The PSD makes it possible to analyze the effects of stochastic sampling. One way to do so is through #emph[jittering];, which adds uniform random offsets to regularly spaced sample points. With a uniform random number $xi$ between 0 and 1, a random set of samples based on the impulse train is
][
  PSD使得分析随机采样的效果成为可能。分析的一种方法是通过#emph[抖动];，它通过为规则间隔的样本点添加均匀随机偏移来实现。使用0到1之间的均匀随机数 $xi$，基于脉冲列的随机样本集为
]


$ s_T (x) = sigma sum_(i = - oo)^oo delta (x - (i + 1 / 2 - xi) T) $<jittered-sampling-func>

#parec[
  It is possible to derive the expectation of the analytic PSD of this sampling strategy,#footnote[In the following, when we speak of the PSD of a stochastic sampling method, we mean the expectation of its PSD, but we will often omit that qualifier.]
][
  可以推导出这种采样策略的解析功率谱密度的期望值，#footnote[在下文中，当我们谈及随机采样方法的 `PSD` 时，我们指的是其 `PSD` 的期望（值），但我们通常会省略这个限定语。]
]

$ P_s (omega) = 1 - sin^2 (frac(T omega, 2)) + delta (omega) $<jittered-psd>

#parec[
  This function is graphed in @fig:psd-jittered. Note that there is a spike at the origin, that its value is otherwise close to 0 in the low frequencies, and that it settles in to an increasingly narrow range around 1 at the higher frequencies.
][
  该函数如@fig:psd-jittered 所示。注意在原点有一个尖峰，在低频时其值接近0，而在高频时其值逐渐稳定在1的一个越来越窄的范围内。
]

#figure(
  image("../pbr-book-website/4ed/Sampling_and_Reconstruction/pha08f13.svg"),
  caption: [
    #ez_caption[Graph of the PSD of jittered samples with $T=1$, as given by @eqt:jittered-psd.][抖动采样在 \( T=1 \) 时的功率谱密度（PSD）图，如公式 @eqt:jittered-psd 所示。]
  ],
)<psd-jittered>


#parec[
  We can use the PSD to compare the effect of undersampling a function in two different ways: using regularly spaced samples and using jittered samples.@fig:jittered-sampling-and-aliasing (a) shows the frequency space representation of a function with energy in frequencies $|omega| > 1\/2$, which is the maximum frequency content that can be perfectly reconstructed with regular sampling with $t=1$. @fig:jittered-sampling-and-aliasing (b) then shows the result of convolving the function's PSD with regular samples and @fig:jittered-sampling-and-aliasing (c) shows the result with jittered samples.
][
  我们可以使用功率谱密度（PSD）以两种不同的方式比较对函数进行欠采样的效果：使用规则间隔的样本和使用抖动样本。@fig:jittered-sampling-and-aliasing (a) 显示了一个在频率 $|omega| > 1\/2$ 上有能量的函数的频率空间表示，这是使用采样间隔 $T=1$ 进行规则采样时可以完美重建的最大频率内容。@fig:jittered-sampling-and-aliasing (b) 显示了将函数的 PSD 与规则样本卷积的结果，@fig:jittered-sampling-and-aliasing (c) 则显示了使用抖动样本的结果。
]


#figure(
  image("../pbr-book-website/4ed/Sampling_and_Reconstruction/pha08f14.svg"),
  caption: [
    #ez_caption[ *The Effect of Jittered Sampling on Aliasing. *(a) The power spectral density of a function that cannot be perfectly reconstructed with regularly spaced samples at a rate $T=1$. (b) The PSD from sampling the function with a shah function with $T=1$ (red), which is given by the convolution of their PSDs. The original function is shown in blue and the extent of the ideal reconstruction filter is shown with dashed lines. (c) The PSD from jittered sampling (red), which is given by convolving $"P"_f$ with @eqt:jittered-psd. (The original function is again in blue and the perfect reconstruction filter is indicated by the dashed box.)][*抖动采样对混叠的影响。*
      (a) 在采样率 $T=1$ 下，无法通过规则间隔采样完美重建的函数的功率谱密度。
      (b) 使用采样间隔 $T=1$ 的shah函数对该函数进行采样得到的功率谱密度（红色），该结果由它们的功率谱密度卷积得到。原始函数以蓝色显示，理想重建滤波器的范围以虚线表示。
      (c) 通过抖动采样得到的功率谱密度（红色），该结果由 $"P"_f$ 与 @eqt:jittered-psd 卷积得到。（原始函数再次以蓝色显示，理想重建滤波器由虚线框表示。）]
  ],
)<jittered-sampling-and-aliasing>

#parec[
  In general, aliasing is reduced most effectively if there is minimal energy in the PSD of the sampling function at low frequencies. This characteristic prevents higher frequencies in the function being sampled from appearing as aliases at lower frequencies. (It is implicit in this assumption that the function f's energy is concentrated in the lower frequencies. This is the case for most natural images, though if this is not the case, then the behavior of the sampling function's PSD at the lower frequencies does not matter as much.)
][
  一般来说，如果采样函数的功率谱密度（PSD）在低频区域的能量很小，那么混叠就能被最有效地减少。这种特性可以防止被采样的函数中的高频成分在较低频率处以混叠的形式出现。（这个假设隐含着函数 $f$ 的能量集中在低频区域。这对于大多数自然图像来说确实如此，但如果情况并非如此，那么采样函数的 PSD 在低频区域的行为就不那么重要了。）
]

#parec[
  While the shah function is effective by this measure, the uniformity of its sampling rate can lead to structured error, as was shown in @fig:jittered-sampling-and-aliasing . With jittered sampling, the copies of the sampled signal end up being randomly shifted, so that when reconstruction is performed the result is random error rather than coherent aliasing. Because jittered sampling has roughly the same amount of energy in all the higher frequencies of its PSD, it spreads high-frequency energy in the function being sampled over many frequencies, converting aliasing into high-frequency noise, which is more visually pleasing to human observers than lower-frequency aliasing.
][
  虽然按照这种标准衡量，Shah函数是有效的，但其采样率的均匀性可能会导致结构化的误差，如@fig:jittered-sampling-and-aliasing 所示。使用抖动采样时，被采样信号的副本最终会被随机移位，因此在重建时，结果是随机误差而不是相干的混叠。由于抖动采样在其功率谱密度（PSD）的所有高频分量中具有大致相同的能量，它将被采样函数中的高频能量分散到多个频率上，将混叠转换为高频噪声。相比于低频混叠，高频噪声对人类观察者来说更为悦目。
]

#parec[
  PPSDs are sometimes described in terms of their color. For example, a white noise distribution has equal power at all frequencies, just as white light has (more or less) equal power at all visible frequencies. Blue noise corresponds to a distribution with its power concentrated at the higher frequencies and less power at low frequencies, again corresponding to the relationship between power and frequency exhibited by blue light.
][
  有时，人们用颜色来描述 PPSD。例如，白噪声分布在所有频率上具有相等的功率，就像白光在所有可见频率上（或多或少）具有相等的功率一样。蓝噪声对应于一种功率集中在高频而在低频功率较少的分布，这再次对应于蓝光所表现的功率与频率之间的关系。
]

#parec[
  We will occasionally find precomputed 2D tables of values that have blue noise characteristics to be useful; pbrt includes a number of such tables that are made available through the following function. Tables are reused once the provided tableIndex value goes past their number.
][
  我们有时会发现预先计算好的具有蓝噪声特性的二维值表非常有用；pbrt 包含了许多这样的表格，可以通过以下函数获取。一旦提供的 `tableIndex` 值超过了表格的数量，这些表格将被重复使用。
]

```cpp
<<Blue noise lookup functions>>=
float BlueNoise(int tableIndex, Point2i p);
```


#parec[
  @fig:white-vs-blue-noise shows one such table along with a white noise image. With a blue noise distribution, the values at nearby pixels differ, corresponding to higher-frequency variation. Because the white noise image does not have this characteristic, there are visible clumps of pixels with similar values.
][
  @fig:white-vs-blue-noise 展示了一个这样的表格以及一幅白噪声图像。对于蓝噪声分布，邻近像素的值有所不同，体现出高频的变化。由于白噪声图像不具备这种特性，因此会出现具有相似值的像素簇。
]

#figure(
  image("../pbr-book-website/4ed/Sampling_and_Reconstruction/pha08f15.svg"),
  caption: [
    #ez_caption[$256times 256$ pixels with (a) values distributed with white noise characteristics, and (b) with blue noise. (Blue noise table courtesy of Christoph Peters.)][$256 times 256$ 像素的图像，其中 (a) 的值按照白噪声特性分布，(b) 的值按照蓝噪声特性分布。（蓝噪声表格由 Christoph Peters 提供）]
  ],
)<white-vs-blue-noise>
